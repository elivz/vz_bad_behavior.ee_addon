<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');
define('BB2_CWD', dirname(__FILE__));

/**
 * VZ Bad Behavior Extension
 *
 * @package		ExpressionEngine
 * @subpackage	Addons
 * @category	Extension
 * @author		Eli Van Zoeren
 * @link		http://elivz.com
 */

class Vz_bad_behavior_ext {
	
	public $settings 		= array();
	public $description		= 'EE implementation of the spam-blocking Bad Behavior script.';
	public $docs_url		= 'http://elivz.com';
	public $name			= 'VZ Bad Behavior';
	public $settings_exist	= 'y';
	public $version			= '0.9';
	
	private $EE;
	
	/**
	 * Constructor
	 */
	public function __construct($settings = '')
	{
		$this->EE =& get_instance();
		$this->settings = $settings;
	}
	
	private $default_settings = array(
        'verbose' => 'n',
        'logging' => 'y',
        'display_stats' => 'y',
        'strict' => 'n',
        'httpbl_key' => '',
        'httpbl_threat' => '25',
        'httpbl_maxage' => '30',
        'offsite_forms' => 'n'
    );
	
	// ----------------------------------------------------------------------
	
	/**
	 * Activate Extension
	 */
	public function activate_extension()
	{
		// Setup custom settings in this array.
		$this->settings = array();
		
		$data = array(
			'class'		=> __CLASS__,
			'method'	=> 'bad_behavior',
			'hook'		=> 'sessions_start',
			'settings'	=> serialize($this->settings),
			'version'	=> $this->version,
			'enabled'	=> 'y'
		);

		$this->EE->db->insert('extensions', $data);
        
        // Use default settings
    	$this->EE->db->update('extensions', array('settings' => serialize($this->default_settings)));
		
		// Install Bad Behavior table
        require_once(BB2_CWD . "/bad-behavior/version.inc.php");
        require_once(BB2_CWD . "/bad-behavior/core.inc.php");
	}	
	
	// ----------------------------------------------------------------------
	
	/**
	 * Display Settings Form
	 */
    function settings_form($settings)
    {
        global $bb_default_settings;
        $this->EE->load->helper('form');
        $this->EE->load->library('table');
		
		return $this->EE->load->view('index', array('settings' => $settings), TRUE);
	}
	
	/**
     * Save Settings
     */
    function save_settings()
    {
    	if (empty($_POST))
    	{
    		show_error($this->EE->lang->line('unauthorized_access'));
    	}
    	
    	unset($_POST['submit']);
    	
    	$this->EE->db->where('class', __CLASS__);
    	$this->EE->db->update('extensions', array('settings' => serialize($_POST)));
    	
    	$this->EE->session->set_flashdata(
    		'message_success',
    	 	$this->EE->lang->line('preferences_updated')
    	);
    }

	// ----------------------------------------------------------------------

	/**
	 * Disable Extension
	 */
	public function disable_extension()
	{
		$this->EE->db->where('class', __CLASS__);
		$this->EE->db->delete('extensions');
	}	
	
	// ----------------------------------------------------------------------
	
	/**
	 * bad_behavior
	 */
	public function bad_behavior()
	{
        // Calls inward to Bad Behavor itself.
        require_once(BB2_CWD . "/bad-behavior/version.inc.php");
        require_once(BB2_CWD . "/bad-behavior/core.inc.php");
        
        bb2_install();
        bb2_start(bb2_read_settings());
	}

	// ----------------------------------------------------------------------
}


// ----------------------------------------------------------------------

// Bad Behavior callback functions.

// Return current time in the format preferred by your database.
function bb2_db_date()
{
	$EE =& get_instance();
	return gmdate('Y-m-d H:i:s', $EE->localize->now);
}

// Return affected rows from most recent query.
function bb2_db_affected_rows()
{
	$EE =& get_instance();
	return $EE->db->affected_rows();
}

// Escape a string for database usage
function bb2_db_escape($string)
{
	$EE =& get_instance();
	return $EE->db->escape_str($string);
}

// Return the number of rows in a particular query.
function bb2_db_num_rows($result)
{
	if ($result !== FALSE)
		return $result->num_rows();
	return 0;
}

// Run a query and return the results, if any.
// Should return FALSE if an error occurred.
// Bad Behavior will use the return value here in other callbacks.
function bb2_db_query($query)
{
	$EE =& get_instance();
	return $EE->db->query($query);
}

// Return all rows in a particular query.
// Should contain an array of all rows generated by calling mysql_fetch_assoc()
// or equivalent and appending the result of each call to an array.
function bb2_db_rows($result)
{
	if ($result->num_rows() > 0)
    {
        return $results->result_array() ;
    }
}

// Return emergency contact email address.
function bb2_email()
{
	$EE =& get_instance();
	return $EE->config->item('webmaster_email');
}

// retrieve settings from database
// Settings are hard-coded for non-database use
function bb2_read_settings()
{
    global $bb_default_settings;
	$EE =& get_instance();
	$saved_settings = array();
	
    if (isset($EE->extensions->extensions['sessions_start']))
    {
        foreach($EE->extensions->extensions['sessions_start'] as $priority => $extension)
        {
            if (isset($extension['Vz_bad_behavior_ext']))
            {
                // Retrieve the saved settings
                if ($extension['Vz_bad_behavior_ext']['1'] != '')
                {
                    $settings = unserialize($extension['Vz_bad_behavior_ext']['1']);
                    
                    // Merge in the saved settings, converting strings to booleans
                    foreach ($settings as $key => $value)
                    {
                        if ($value === 'y')
                        {
                            $settings[$key] = true;
                        }
                        elseif ($value == 'n')
                        {
                            $settings[$key] = false;
                        }
                    }
                    
                    return $settings;
                }
			}
		}
	}
}

// write settings to database
function bb2_write_settings($settings)
{
	return false;
}

// installation
function bb2_install()
{
	$settings = bb2_read_settings();
	bb2_db_query(bb2_table_structure($settings['log_table']));
}

// Screener
// Insert this into the <head> section of your HTML through a template call
// or whatever is appropriate. This is optional we'll fall back to cookies
// if you don't use it.
function bb2_insert_head()
{
	global $bb2_javascript;
	echo $bb2_javascript;
}

// Display stats? This is optional.
function bb2_insert_stats($force = false)
{
	$settings = bb2_read_settings();

	if ($force || $settings['display_stats'])
	{
		$blocked = bb2_db_query("SELECT COUNT(*) FROM " . $settings['log_table'] . " WHERE `key` NOT LIKE '00000000'");
		if ($blocked !== FALSE)
		{
			echo sprintf('<p><a href="http://www.bad-behavior.ioerror.us/">%1$s</a> %2$s <strong>%3$s</strong> %4$s</p>', __('Bad Behavior'), __('has blocked'), $blocked[0]["COUNT(*)"], __('access attempts in the last 7 days.'));
		}
	}
}

// Return the top-level relative path of wherever we are (for cookies)
// You should provide in $url the top-level URL for your site.
function bb2_relative_path()
{
	$EE =& get_instance();
	return str_replace('//', '/', $EE->config->item('cookie_path').'/');
}

/* End of file ext.vz_bad_behavior.php */
/* Location: /system/expressionengine/third_party/vz_bad_behavior/ext.vz_bad_behavior.php */